// @generated by protobuf-ts 2.11.0 with parameter long_type_string,optimize_code_size
// @generated from protobuf file "events.proto" (package "testsystem.events", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Attachment } from "./common";
import { TestStatus } from "./common";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message testsystem.events.TestStartEvent
 */
export interface TestStartEvent {
    /**
     * @generated from protobuf field: string test_id = 1
     */
    testId: string;
    /**
     * @generated from protobuf field: string test_name = 2
     */
    testName: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp start_time = 3
     */
    startTime?: Timestamp;
    /**
     * @generated from protobuf field: map<string, string> metadata = 4
     */
    metadata: {
        [key: string]: string;
    }; // Additional metadata
}
/**
 * @generated from protobuf message testsystem.events.TestFinishEvent
 */
export interface TestFinishEvent {
    /**
     * @generated from protobuf field: string test_id = 1
     */
    testId: string;
    /**
     * @generated from protobuf field: testsystem.common.TestStatus status = 2
     */
    status: TestStatus;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp end_time = 3
     */
    endTime?: Timestamp;
    /**
     * @generated from protobuf field: repeated testsystem.common.Attachment attachments = 4
     */
    attachments: Attachment[];
    /**
     * @generated from protobuf field: string error_message = 5
     */
    errorMessage: string; // If any
    /**
     * @generated from protobuf field: string stack_trace = 6
     */
    stackTrace: string; // If any
}
/**
 * @generated from protobuf message testsystem.events.TestStep
 */
export interface TestStep {
    /**
     * @generated from protobuf field: string description = 1
     */
    description: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp timestamp = 2
     */
    timestamp?: Timestamp;
    /**
     * @generated from protobuf field: testsystem.common.TestStatus status = 3
     */
    status: TestStatus;
    /**
     * @generated from protobuf field: repeated testsystem.common.Attachment attachments = 4
     */
    attachments: Attachment[];
}
/**
 * @generated from protobuf message testsystem.events.TestStepEvent
 */
export interface TestStepEvent {
    /**
     * @generated from protobuf field: string test_id = 1
     */
    testId: string;
    /**
     * @generated from protobuf field: repeated testsystem.events.TestStep steps = 2
     */
    steps: TestStep[];
}
// @generated message type with reflection information, may provide speed optimized methods
class TestStartEvent$Type extends MessageType<TestStartEvent> {
    constructor() {
        super("testsystem.events.TestStartEvent", [
            { no: 1, name: "test_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "test_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "start_time", kind: "message", T: () => Timestamp },
            { no: 4, name: "metadata", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<TestStartEvent>): TestStartEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.testId = "";
        message.testName = "";
        message.metadata = {};
        if (value !== undefined)
            reflectionMergePartial<TestStartEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestStartEvent): TestStartEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string test_id */ 1:
                    message.testId = reader.string();
                    break;
                case /* string test_name */ 2:
                    message.testName = reader.string();
                    break;
                case /* google.protobuf.Timestamp start_time */ 3:
                    message.startTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startTime);
                    break;
                case /* map<string, string> metadata */ 4:
                    this.binaryReadMap4(message.metadata, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: TestStartEvent["metadata"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof TestStartEvent["metadata"] | undefined, val: TestStartEvent["metadata"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for testsystem.events.TestStartEvent.metadata");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: TestStartEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string test_id = 1; */
        if (message.testId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.testId);
        /* string test_name = 2; */
        if (message.testName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.testName);
        /* google.protobuf.Timestamp start_time = 3; */
        if (message.startTime)
            Timestamp.internalBinaryWrite(message.startTime, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* map<string, string> metadata = 4; */
        for (let k of globalThis.Object.keys(message.metadata))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.metadata[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message testsystem.events.TestStartEvent
 */
export const TestStartEvent = new TestStartEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestFinishEvent$Type extends MessageType<TestFinishEvent> {
    constructor() {
        super("testsystem.events.TestFinishEvent", [
            { no: 1, name: "test_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["testsystem.common.TestStatus", TestStatus] },
            { no: 3, name: "end_time", kind: "message", T: () => Timestamp },
            { no: 4, name: "attachments", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Attachment },
            { no: 5, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "stack_trace", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TestFinishEvent>): TestFinishEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.testId = "";
        message.status = 0;
        message.attachments = [];
        message.errorMessage = "";
        message.stackTrace = "";
        if (value !== undefined)
            reflectionMergePartial<TestFinishEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestFinishEvent): TestFinishEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string test_id */ 1:
                    message.testId = reader.string();
                    break;
                case /* testsystem.common.TestStatus status */ 2:
                    message.status = reader.int32();
                    break;
                case /* google.protobuf.Timestamp end_time */ 3:
                    message.endTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endTime);
                    break;
                case /* repeated testsystem.common.Attachment attachments */ 4:
                    message.attachments.push(Attachment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string error_message */ 5:
                    message.errorMessage = reader.string();
                    break;
                case /* string stack_trace */ 6:
                    message.stackTrace = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestFinishEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string test_id = 1; */
        if (message.testId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.testId);
        /* testsystem.common.TestStatus status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* google.protobuf.Timestamp end_time = 3; */
        if (message.endTime)
            Timestamp.internalBinaryWrite(message.endTime, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated testsystem.common.Attachment attachments = 4; */
        for (let i = 0; i < message.attachments.length; i++)
            Attachment.internalBinaryWrite(message.attachments[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string error_message = 5; */
        if (message.errorMessage !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.errorMessage);
        /* string stack_trace = 6; */
        if (message.stackTrace !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.stackTrace);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message testsystem.events.TestFinishEvent
 */
export const TestFinishEvent = new TestFinishEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestStep$Type extends MessageType<TestStep> {
    constructor() {
        super("testsystem.events.TestStep", [
            { no: 1, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "timestamp", kind: "message", T: () => Timestamp },
            { no: 3, name: "status", kind: "enum", T: () => ["testsystem.common.TestStatus", TestStatus] },
            { no: 4, name: "attachments", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Attachment }
        ]);
    }
    create(value?: PartialMessage<TestStep>): TestStep {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.description = "";
        message.status = 0;
        message.attachments = [];
        if (value !== undefined)
            reflectionMergePartial<TestStep>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestStep): TestStep {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string description */ 1:
                    message.description = reader.string();
                    break;
                case /* google.protobuf.Timestamp timestamp */ 2:
                    message.timestamp = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.timestamp);
                    break;
                case /* testsystem.common.TestStatus status */ 3:
                    message.status = reader.int32();
                    break;
                case /* repeated testsystem.common.Attachment attachments */ 4:
                    message.attachments.push(Attachment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestStep, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string description = 1; */
        if (message.description !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.description);
        /* google.protobuf.Timestamp timestamp = 2; */
        if (message.timestamp)
            Timestamp.internalBinaryWrite(message.timestamp, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* testsystem.common.TestStatus status = 3; */
        if (message.status !== 0)
            writer.tag(3, WireType.Varint).int32(message.status);
        /* repeated testsystem.common.Attachment attachments = 4; */
        for (let i = 0; i < message.attachments.length; i++)
            Attachment.internalBinaryWrite(message.attachments[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message testsystem.events.TestStep
 */
export const TestStep = new TestStep$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TestStepEvent$Type extends MessageType<TestStepEvent> {
    constructor() {
        super("testsystem.events.TestStepEvent", [
            { no: 1, name: "test_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "steps", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TestStep }
        ]);
    }
    create(value?: PartialMessage<TestStepEvent>): TestStepEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.testId = "";
        message.steps = [];
        if (value !== undefined)
            reflectionMergePartial<TestStepEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TestStepEvent): TestStepEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string test_id */ 1:
                    message.testId = reader.string();
                    break;
                case /* repeated testsystem.events.TestStep steps */ 2:
                    message.steps.push(TestStep.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TestStepEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string test_id = 1; */
        if (message.testId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.testId);
        /* repeated testsystem.events.TestStep steps = 2; */
        for (let i = 0; i < message.steps.length; i++)
            TestStep.internalBinaryWrite(message.steps[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message testsystem.events.TestStepEvent
 */
export const TestStepEvent = new TestStepEvent$Type();
