// @generated by protobuf-ts 2.11.0 with parameter long_type_string,optimize_code_size
// @generated from protobuf file "observer.proto" (package "testsystem.observer", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TestEventCollector } from "./observer";
import type { TestStepEvent } from "./events";
import type { TestFinishEvent } from "./events";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Ack } from "./observer";
import type { TestStartEvent } from "./events";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service testsystem.observer.TestEventCollector
 */
export interface ITestEventCollectorClient {
    /**
     * @generated from protobuf rpc: ReportTestStart
     */
    reportTestStart(input: TestStartEvent, options?: RpcOptions): UnaryCall<TestStartEvent, Ack>;
    /**
     * @generated from protobuf rpc: ReportTestFinish
     */
    reportTestFinish(input: TestFinishEvent, options?: RpcOptions): UnaryCall<TestFinishEvent, Ack>;
    /**
     * @generated from protobuf rpc: ReportTestStep
     */
    reportTestStep(input: TestStepEvent, options?: RpcOptions): UnaryCall<TestStepEvent, Ack>;
}
/**
 * @generated from protobuf service testsystem.observer.TestEventCollector
 */
export class TestEventCollectorClient implements ITestEventCollectorClient, ServiceInfo {
    typeName = TestEventCollector.typeName;
    methods = TestEventCollector.methods;
    options = TestEventCollector.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ReportTestStart
     */
    reportTestStart(input: TestStartEvent, options?: RpcOptions): UnaryCall<TestStartEvent, Ack> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<TestStartEvent, Ack>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ReportTestFinish
     */
    reportTestFinish(input: TestFinishEvent, options?: RpcOptions): UnaryCall<TestFinishEvent, Ack> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<TestFinishEvent, Ack>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ReportTestStep
     */
    reportTestStep(input: TestStepEvent, options?: RpcOptions): UnaryCall<TestStepEvent, Ack> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<TestStepEvent, Ack>("unary", this._transport, method, opt, input);
    }
}
