// @generated by protobuf-ts 2.11.0 with parameter long_type_string,optimize_code_size
// @generated from protobuf file "common.proto" (package "testsystem.common", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * Message for attachments
 *
 * @generated from protobuf message testsystem.common.Attachment
 */
export interface Attachment {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * @generated from protobuf field: string mime_type = 2
     */
    mimeType: string;
    /**
     * @generated from protobuf field: bytes content = 3
     */
    content: Uint8Array; // Binary content of the attachment
}
/**
 * Enum for test result statuses
 *
 * @generated from protobuf enum testsystem.common.TestStatus
 */
export enum TestStatus {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: PASSED = 1;
     */
    PASSED = 1,
    /**
     * @generated from protobuf enum value: FAILED = 2;
     */
    FAILED = 2,
    /**
     * @generated from protobuf enum value: SKIPPED = 3;
     */
    SKIPPED = 3,
    /**
     * @generated from protobuf enum value: BROKEN = 4;
     */
    BROKEN = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class Attachment$Type extends MessageType<Attachment> {
    constructor() {
        super("testsystem.common.Attachment", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "mime_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "content", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Attachment>): Attachment {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.mimeType = "";
        message.content = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<Attachment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Attachment): Attachment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string mime_type */ 2:
                    message.mimeType = reader.string();
                    break;
                case /* bytes content */ 3:
                    message.content = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Attachment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string mime_type = 2; */
        if (message.mimeType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.mimeType);
        /* bytes content = 3; */
        if (message.content.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message testsystem.common.Attachment
 */
export const Attachment = new Attachment$Type();
